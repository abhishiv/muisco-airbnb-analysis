/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
/**
 * The root query type which gives access points into the data universe.
 */
export interface MuiscoQuery extends MuiscoNode {
  
  /**
   * Exposes the root query type nested one level down. This is helpful for Relay 1
   * which can only query top level fields if they are in a particular form.
   */
  query: MuiscoQuery;
  
  /**
   * The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
   */
  nodeId: string;
  
  /**
   * Fetches an object given its globally unique `ID`.
   */
  node?: MuiscoNode;
  
  /**
   * Reads and enables pagination through a set of `Dashboard`.
   */
  allDashboards?: MuiscoDashboardsConnection;
  
  /**
   * Reads and enables pagination through a set of `Review`.
   */
  allReviews?: MuiscoReviewsConnection;
  
  /**
   * Reads and enables pagination through a set of `Topography`.
   */
  allTopographies?: MuiscoTopographiesConnection;
  dashboardById?: MuiscoDashboard;
  reviewById?: MuiscoReview;
  topographyById?: MuiscoTopography;
  aggregateListings: MuiscoAggregateListingsConnection;
  groupListingsDate: MuiscoGroupListingsDateConnection;
  
  /**
   * Reads a single `Dashboard` using its globally unique `ID`.
   */
  dashboard?: MuiscoDashboard;
  
  /**
   * Reads a single `Review` using its globally unique `ID`.
   */
  review?: MuiscoReview;
  
  /**
   * Reads a single `Topography` using its globally unique `ID`.
   */
  topography?: MuiscoTopography;
}

/**
 * An object with a globally unique `ID`.
 */
export interface MuiscoNode {
  
  /**
   * A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   */
  nodeId: string;
}

/** Use this to resolve interface type Node */
export type MuiscoPossibleNodeTypeNames =
'Query' |
'Dashboard' |
'Review' |
'Topography';

export interface MuiscoNodeNameMap {
  Node: MuiscoNode;
  Query: MuiscoQuery;
  Dashboard: MuiscoDashboard;
  Review: MuiscoReview;
  Topography: MuiscoTopography;
}

/**
 * A location in a connection that can be used for resuming pagination.
 */
export type MuiscoCursor = any;

/**
 * Methods to use when ordering `Dashboard`.
 */
export enum MuiscoDashboardsOrderBy {
  NATURAL = 'NATURAL',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  DEFINITION_ASC = 'DEFINITION_ASC',
  DEFINITION_DESC = 'DEFINITION_DESC',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC'
}

/**
 * A condition to be used against `Dashboard` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export interface MuiscoDashboardCondition {
  
  /**
   * Checks for equality with the object’s `id` field.
   */
  id?: string;
  
  /**
   * Checks for equality with the object’s `definition` field.
   */
  definition?: MuiscoJSON;
}

/**
 * A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
 */
export type MuiscoJSON = any;

/**
 * A connection to a list of `Dashboard` values.
 */
export interface MuiscoDashboardsConnection {
  
  /**
   * A list of `Dashboard` objects.
   */
  nodes: Array<MuiscoDashboard | null>;
  
  /**
   * A list of edges which contains the `Dashboard` and cursor to aid in pagination.
   */
  edges: Array<MuiscoDashboardsEdge>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: MuiscoPageInfo;
  
  /**
   * The count of *all* `Dashboard` you could get from the connection.
   */
  totalCount: number;
}

export interface MuiscoDashboard extends MuiscoNode {
  
  /**
   * A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   */
  nodeId: string;
  id: string;
  definition?: MuiscoJSON;
}

/**
 * A `Dashboard` edge in the connection.
 */
export interface MuiscoDashboardsEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor?: MuiscoCursor;
  
  /**
   * The `Dashboard` at the end of the edge.
   */
  node?: MuiscoDashboard;
}

/**
 * Information about pagination in a connection.
 */
export interface MuiscoPageInfo {
  
  /**
   * When paginating forwards, are there more items?
   */
  hasNextPage: boolean;
  
  /**
   * When paginating backwards, are there more items?
   */
  hasPreviousPage: boolean;
  
  /**
   * When paginating backwards, the cursor to continue.
   */
  startCursor?: MuiscoCursor;
  
  /**
   * When paginating forwards, the cursor to continue.
   */
  endCursor?: MuiscoCursor;
}

/**
 * Methods to use when ordering `Review`.
 */
export enum MuiscoReviewsOrderBy {
  NATURAL = 'NATURAL',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  LISTING_ID_ASC = 'LISTING_ID_ASC',
  LISTING_ID_DESC = 'LISTING_ID_DESC',
  CHECKSUM_ASC = 'CHECKSUM_ASC',
  CHECKSUM_DESC = 'CHECKSUM_DESC',
  DATE_ASC = 'DATE_ASC',
  DATE_DESC = 'DATE_DESC',
  CITY_ASC = 'CITY_ASC',
  CITY_DESC = 'CITY_DESC',
  NEIGHBOURHOOD_ASC = 'NEIGHBOURHOOD_ASC',
  NEIGHBOURHOOD_DESC = 'NEIGHBOURHOOD_DESC',
  ROOM_TYPE_ASC = 'ROOM_TYPE_ASC',
  ROOM_TYPE_DESC = 'ROOM_TYPE_DESC',
  PRICE_ASC = 'PRICE_ASC',
  PRICE_DESC = 'PRICE_DESC',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC'
}

/**
 * A condition to be used against `Review` object types. All fields are tested for equality and combined with a logical ‘and.’
 */
export interface MuiscoReviewCondition {
  
  /**
   * Checks for equality with the object’s `id` field.
   */
  id?: string;
  
  /**
   * Checks for equality with the object’s `listingId` field.
   */
  listingId?: string;
  
  /**
   * Checks for equality with the object’s `checksum` field.
   */
  checksum?: string;
  
  /**
   * Checks for equality with the object’s `date` field.
   */
  date?: MuiscoDate;
  
  /**
   * Checks for equality with the object’s `city` field.
   */
  city?: string;
  
  /**
   * Checks for equality with the object’s `neighbourhood` field.
   */
  neighbourhood?: string;
  
  /**
   * Checks for equality with the object’s `roomType` field.
   */
  roomType?: string;
  
  /**
   * Checks for equality with the object’s `price` field.
   */
  price?: MuiscoBigFloat;
}

/**
 * The day, does not include a time.
 */
export type MuiscoDate = any;

/**
 * A floating point number that requires more precision than IEEE 754 binary 64
 */
export type MuiscoBigFloat = any;

/**
 * A connection to a list of `Review` values.
 */
export interface MuiscoReviewsConnection {
  
  /**
   * A list of `Review` objects.
   */
  nodes: Array<MuiscoReview | null>;
  
  /**
   * A list of edges which contains the `Review` and cursor to aid in pagination.
   */
  edges: Array<MuiscoReviewsEdge>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: MuiscoPageInfo;
  
  /**
   * The count of *all* `Review` you could get from the connection.
   */
  totalCount: number;
}

export interface MuiscoReview extends MuiscoNode {
  
  /**
   * A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   */
  nodeId: string;
  id: string;
  listingId?: string;
  checksum?: string;
  date?: MuiscoDate;
  city?: string;
  neighbourhood?: string;
  roomType?: string;
  price?: MuiscoBigFloat;
}

/**
 * A `Review` edge in the connection.
 */
export interface MuiscoReviewsEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor?: MuiscoCursor;
  
  /**
   * The `Review` at the end of the edge.
   */
  node?: MuiscoReview;
}

/**
 * Methods to use when ordering `Topography`.
 */
export enum MuiscoTopographiesOrderBy {
  NATURAL = 'NATURAL',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  PAYLOAD_ASC = 'PAYLOAD_ASC',
  PAYLOAD_DESC = 'PAYLOAD_DESC',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC'
}

/**
 * A condition to be used against `Topography` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export interface MuiscoTopographyCondition {
  
  /**
   * Checks for equality with the object’s `id` field.
   */
  id?: string;
  
  /**
   * Checks for equality with the object’s `payload` field.
   */
  payload?: MuiscoJSON;
}

/**
 * A connection to a list of `Topography` values.
 */
export interface MuiscoTopographiesConnection {
  
  /**
   * A list of `Topography` objects.
   */
  nodes: Array<MuiscoTopography | null>;
  
  /**
   * A list of edges which contains the `Topography` and cursor to aid in pagination.
   */
  edges: Array<MuiscoTopographiesEdge>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: MuiscoPageInfo;
  
  /**
   * The count of *all* `Topography` you could get from the connection.
   */
  totalCount: number;
}

export interface MuiscoTopography extends MuiscoNode {
  
  /**
   * A globally unique identifier. Can be used in various places throughout the system to identify this single value.
   */
  nodeId: string;
  id: string;
  payload?: MuiscoJSON;
}

/**
 * A `Topography` edge in the connection.
 */
export interface MuiscoTopographiesEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor?: MuiscoCursor;
  
  /**
   * The `Topography` at the end of the edge.
   */
  node?: MuiscoTopography;
}

/**
 * A connection to a list of `AggregateListingsRecord` values.
 */
export interface MuiscoAggregateListingsConnection {
  
  /**
   * A list of `AggregateListingsRecord` objects.
   */
  nodes: Array<MuiscoAggregateListingsRecord | null>;
  
  /**
   * A list of edges which contains the `AggregateListingsRecord` and cursor to aid in pagination.
   */
  edges: Array<MuiscoAggregateListingEdge>;
}

/**
 * The return type of our `aggregateListings` query.
 */
export interface MuiscoAggregateListingsRecord {
  listingsCount?: MuiscoBigInt;
  avgPrice?: MuiscoBigFloat;
  roomType?: string;
  id?: string;
}

/**
 * A signed eight-byte integer. The upper big integer values are greater than the
 * max value for a JavaScript number. Therefore all big integers will be output as
 * strings and not numbers.
 */
export type MuiscoBigInt = any;

/**
 * A `AggregateListingsRecord` edge in the connection.
 */
export interface MuiscoAggregateListingEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor?: MuiscoCursor;
  
  /**
   * The `AggregateListingsRecord` at the end of the edge.
   */
  node?: MuiscoAggregateListingsRecord;
}

/**
 * A connection to a list of `GroupListingsDateRecord` values.
 */
export interface MuiscoGroupListingsDateConnection {
  
  /**
   * A list of `GroupListingsDateRecord` objects.
   */
  nodes: Array<MuiscoGroupListingsDateRecord | null>;
  
  /**
   * A list of edges which contains the `GroupListingsDateRecord` and cursor to aid in pagination.
   */
  edges: Array<MuiscoGroupListingsDateEdge>;
}

/**
 * The return type of our `groupListingsDate` query.
 */
export interface MuiscoGroupListingsDateRecord {
  count?: MuiscoBigInt;
  date?: MuiscoDatetime;
}

/**
 * A point in time as described by the [ISO
 * 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
 */
export type MuiscoDatetime = any;

/**
 * A `GroupListingsDateRecord` edge in the connection.
 */
export interface MuiscoGroupListingsDateEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor?: MuiscoCursor;
  
  /**
   * The `GroupListingsDateRecord` at the end of the edge.
   */
  node?: MuiscoGroupListingsDateRecord;
}

/**
 * The root mutation type which contains root level fields which mutate data.
 */
export interface MuiscoMutation {
  
  /**
   * Creates a single `Dashboard`.
   */
  createDashboard?: MuiscoCreateDashboardPayload;
  
  /**
   * Creates a single `Review`.
   */
  createReview?: MuiscoCreateReviewPayload;
  
  /**
   * Creates a single `Topography`.
   */
  createTopography?: MuiscoCreateTopographyPayload;
  
  /**
   * Updates a single `Dashboard` using its globally unique id and a patch.
   */
  updateDashboard?: MuiscoUpdateDashboardPayload;
  
  /**
   * Updates a single `Dashboard` using a unique key and a patch.
   */
  updateDashboardById?: MuiscoUpdateDashboardPayload;
  
  /**
   * Updates a single `Review` using its globally unique id and a patch.
   */
  updateReview?: MuiscoUpdateReviewPayload;
  
  /**
   * Updates a single `Review` using a unique key and a patch.
   */
  updateReviewById?: MuiscoUpdateReviewPayload;
  
  /**
   * Updates a single `Topography` using its globally unique id and a patch.
   */
  updateTopography?: MuiscoUpdateTopographyPayload;
  
  /**
   * Updates a single `Topography` using a unique key and a patch.
   */
  updateTopographyById?: MuiscoUpdateTopographyPayload;
  
  /**
   * Deletes a single `Dashboard` using its globally unique id.
   */
  deleteDashboard?: MuiscoDeleteDashboardPayload;
  
  /**
   * Deletes a single `Dashboard` using a unique key.
   */
  deleteDashboardById?: MuiscoDeleteDashboardPayload;
  
  /**
   * Deletes a single `Review` using its globally unique id.
   */
  deleteReview?: MuiscoDeleteReviewPayload;
  
  /**
   * Deletes a single `Review` using a unique key.
   */
  deleteReviewById?: MuiscoDeleteReviewPayload;
  
  /**
   * Deletes a single `Topography` using its globally unique id.
   */
  deleteTopography?: MuiscoDeleteTopographyPayload;
  
  /**
   * Deletes a single `Topography` using a unique key.
   */
  deleteTopographyById?: MuiscoDeleteTopographyPayload;
}

/**
 * All input for the create `Dashboard` mutation.
 */
export interface MuiscoCreateDashboardInput {
  
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: string;
  
  /**
   * The `Dashboard` to be created by this mutation.
   */
  dashboard: MuiscoDashboardInput;
}

/**
 * An input for mutations affecting `Dashboard`
 */
export interface MuiscoDashboardInput {
  id: string;
  definition?: MuiscoJSON;
}

/**
 * The output of our create `Dashboard` mutation.
 */
export interface MuiscoCreateDashboardPayload {
  
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: string;
  
  /**
   * The `Dashboard` that was created by this mutation.
   */
  dashboard?: MuiscoDashboard;
  
  /**
   * Our root query field type. Allows us to run any query from our mutation payload.
   */
  query?: MuiscoQuery;
  
  /**
   * An edge for our `Dashboard`. May be used by Relay 1.
   */
  dashboardEdge?: MuiscoDashboardsEdge;
}

/**
 * All input for the create `Review` mutation.
 */
export interface MuiscoCreateReviewInput {
  
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: string;
  
  /**
   * The `Review` to be created by this mutation.
   */
  review: MuiscoReviewInput;
}

/**
 * An input for mutations affecting `Review`
 */
export interface MuiscoReviewInput {
  id: string;
  listingId?: string;
  checksum?: string;
  date?: MuiscoDate;
  city?: string;
  neighbourhood?: string;
  roomType?: string;
  price?: MuiscoBigFloat;
}

/**
 * The output of our create `Review` mutation.
 */
export interface MuiscoCreateReviewPayload {
  
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: string;
  
  /**
   * The `Review` that was created by this mutation.
   */
  review?: MuiscoReview;
  
  /**
   * Our root query field type. Allows us to run any query from our mutation payload.
   */
  query?: MuiscoQuery;
  
  /**
   * An edge for our `Review`. May be used by Relay 1.
   */
  reviewEdge?: MuiscoReviewsEdge;
}

/**
 * All input for the create `Topography` mutation.
 */
export interface MuiscoCreateTopographyInput {
  
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: string;
  
  /**
   * The `Topography` to be created by this mutation.
   */
  topography: MuiscoTopographyInput;
}

/**
 * An input for mutations affecting `Topography`
 */
export interface MuiscoTopographyInput {
  id: string;
  payload?: MuiscoJSON;
}

/**
 * The output of our create `Topography` mutation.
 */
export interface MuiscoCreateTopographyPayload {
  
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: string;
  
  /**
   * The `Topography` that was created by this mutation.
   */
  topography?: MuiscoTopography;
  
  /**
   * Our root query field type. Allows us to run any query from our mutation payload.
   */
  query?: MuiscoQuery;
  
  /**
   * An edge for our `Topography`. May be used by Relay 1.
   */
  topographyEdge?: MuiscoTopographiesEdge;
}

/**
 * All input for the `updateDashboard` mutation.
 */
export interface MuiscoUpdateDashboardInput {
  
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: string;
  
  /**
   * The globally unique `ID` which will identify a single `Dashboard` to be updated.
   */
  nodeId: string;
  
  /**
   * An object where the defined keys will be set on the `Dashboard` being updated.
   */
  dashboardPatch: MuiscoDashboardPatch;
}

/**
 * Represents an update to a `Dashboard`. Fields that are set will be updated.
 */
export interface MuiscoDashboardPatch {
  id?: string;
  definition?: MuiscoJSON;
}

/**
 * The output of our update `Dashboard` mutation.
 */
export interface MuiscoUpdateDashboardPayload {
  
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: string;
  
  /**
   * The `Dashboard` that was updated by this mutation.
   */
  dashboard?: MuiscoDashboard;
  
  /**
   * Our root query field type. Allows us to run any query from our mutation payload.
   */
  query?: MuiscoQuery;
  
  /**
   * An edge for our `Dashboard`. May be used by Relay 1.
   */
  dashboardEdge?: MuiscoDashboardsEdge;
}

/**
 * All input for the `updateDashboardById` mutation.
 */
export interface MuiscoUpdateDashboardByIdInput {
  
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: string;
  
  /**
   * An object where the defined keys will be set on the `Dashboard` being updated.
   */
  dashboardPatch: MuiscoDashboardPatch;
  id: string;
}

/**
 * All input for the `updateReview` mutation.
 */
export interface MuiscoUpdateReviewInput {
  
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: string;
  
  /**
   * The globally unique `ID` which will identify a single `Review` to be updated.
   */
  nodeId: string;
  
  /**
   * An object where the defined keys will be set on the `Review` being updated.
   */
  reviewPatch: MuiscoReviewPatch;
}

/**
 * Represents an update to a `Review`. Fields that are set will be updated.
 */
export interface MuiscoReviewPatch {
  id?: string;
  listingId?: string;
  checksum?: string;
  date?: MuiscoDate;
  city?: string;
  neighbourhood?: string;
  roomType?: string;
  price?: MuiscoBigFloat;
}

/**
 * The output of our update `Review` mutation.
 */
export interface MuiscoUpdateReviewPayload {
  
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: string;
  
  /**
   * The `Review` that was updated by this mutation.
   */
  review?: MuiscoReview;
  
  /**
   * Our root query field type. Allows us to run any query from our mutation payload.
   */
  query?: MuiscoQuery;
  
  /**
   * An edge for our `Review`. May be used by Relay 1.
   */
  reviewEdge?: MuiscoReviewsEdge;
}

/**
 * All input for the `updateReviewById` mutation.
 */
export interface MuiscoUpdateReviewByIdInput {
  
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: string;
  
  /**
   * An object where the defined keys will be set on the `Review` being updated.
   */
  reviewPatch: MuiscoReviewPatch;
  id: string;
}

/**
 * All input for the `updateTopography` mutation.
 */
export interface MuiscoUpdateTopographyInput {
  
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: string;
  
  /**
   * The globally unique `ID` which will identify a single `Topography` to be updated.
   */
  nodeId: string;
  
  /**
   * An object where the defined keys will be set on the `Topography` being updated.
   */
  topographyPatch: MuiscoTopographyPatch;
}

/**
 * Represents an update to a `Topography`. Fields that are set will be updated.
 */
export interface MuiscoTopographyPatch {
  id?: string;
  payload?: MuiscoJSON;
}

/**
 * The output of our update `Topography` mutation.
 */
export interface MuiscoUpdateTopographyPayload {
  
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: string;
  
  /**
   * The `Topography` that was updated by this mutation.
   */
  topography?: MuiscoTopography;
  
  /**
   * Our root query field type. Allows us to run any query from our mutation payload.
   */
  query?: MuiscoQuery;
  
  /**
   * An edge for our `Topography`. May be used by Relay 1.
   */
  topographyEdge?: MuiscoTopographiesEdge;
}

/**
 * All input for the `updateTopographyById` mutation.
 */
export interface MuiscoUpdateTopographyByIdInput {
  
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: string;
  
  /**
   * An object where the defined keys will be set on the `Topography` being updated.
   */
  topographyPatch: MuiscoTopographyPatch;
  id: string;
}

/**
 * All input for the `deleteDashboard` mutation.
 */
export interface MuiscoDeleteDashboardInput {
  
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: string;
  
  /**
   * The globally unique `ID` which will identify a single `Dashboard` to be deleted.
   */
  nodeId: string;
}

/**
 * The output of our delete `Dashboard` mutation.
 */
export interface MuiscoDeleteDashboardPayload {
  
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: string;
  
  /**
   * The `Dashboard` that was deleted by this mutation.
   */
  dashboard?: MuiscoDashboard;
  deletedDashboardId?: string;
  
  /**
   * Our root query field type. Allows us to run any query from our mutation payload.
   */
  query?: MuiscoQuery;
  
  /**
   * An edge for our `Dashboard`. May be used by Relay 1.
   */
  dashboardEdge?: MuiscoDashboardsEdge;
}

/**
 * All input for the `deleteDashboardById` mutation.
 */
export interface MuiscoDeleteDashboardByIdInput {
  
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: string;
  id: string;
}

/**
 * All input for the `deleteReview` mutation.
 */
export interface MuiscoDeleteReviewInput {
  
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: string;
  
  /**
   * The globally unique `ID` which will identify a single `Review` to be deleted.
   */
  nodeId: string;
}

/**
 * The output of our delete `Review` mutation.
 */
export interface MuiscoDeleteReviewPayload {
  
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: string;
  
  /**
   * The `Review` that was deleted by this mutation.
   */
  review?: MuiscoReview;
  deletedReviewId?: string;
  
  /**
   * Our root query field type. Allows us to run any query from our mutation payload.
   */
  query?: MuiscoQuery;
  
  /**
   * An edge for our `Review`. May be used by Relay 1.
   */
  reviewEdge?: MuiscoReviewsEdge;
}

/**
 * All input for the `deleteReviewById` mutation.
 */
export interface MuiscoDeleteReviewByIdInput {
  
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: string;
  id: string;
}

/**
 * All input for the `deleteTopography` mutation.
 */
export interface MuiscoDeleteTopographyInput {
  
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: string;
  
  /**
   * The globally unique `ID` which will identify a single `Topography` to be deleted.
   */
  nodeId: string;
}

/**
 * The output of our delete `Topography` mutation.
 */
export interface MuiscoDeleteTopographyPayload {
  
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: string;
  
  /**
   * The `Topography` that was deleted by this mutation.
   */
  topography?: MuiscoTopography;
  deletedTopographyId?: string;
  
  /**
   * Our root query field type. Allows us to run any query from our mutation payload.
   */
  query?: MuiscoQuery;
  
  /**
   * An edge for our `Topography`. May be used by Relay 1.
   */
  topographyEdge?: MuiscoTopographiesEdge;
}

/**
 * All input for the `deleteTopographyById` mutation.
 */
export interface MuiscoDeleteTopographyByIdInput {
  
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: string;
  id: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface MuiscoResolver {
  Query?: MuiscoQueryTypeResolver;
  Node?: {
    __resolveType: MuiscoNodeTypeResolver
  };
  
  Cursor?: GraphQLScalarType;
  JSON?: GraphQLScalarType;
  DashboardsConnection?: MuiscoDashboardsConnectionTypeResolver;
  Dashboard?: MuiscoDashboardTypeResolver;
  DashboardsEdge?: MuiscoDashboardsEdgeTypeResolver;
  PageInfo?: MuiscoPageInfoTypeResolver;
  Date?: GraphQLScalarType;
  BigFloat?: GraphQLScalarType;
  ReviewsConnection?: MuiscoReviewsConnectionTypeResolver;
  Review?: MuiscoReviewTypeResolver;
  ReviewsEdge?: MuiscoReviewsEdgeTypeResolver;
  TopographiesConnection?: MuiscoTopographiesConnectionTypeResolver;
  Topography?: MuiscoTopographyTypeResolver;
  TopographiesEdge?: MuiscoTopographiesEdgeTypeResolver;
  AggregateListingsConnection?: MuiscoAggregateListingsConnectionTypeResolver;
  AggregateListingsRecord?: MuiscoAggregateListingsRecordTypeResolver;
  BigInt?: GraphQLScalarType;
  AggregateListingEdge?: MuiscoAggregateListingEdgeTypeResolver;
  GroupListingsDateConnection?: MuiscoGroupListingsDateConnectionTypeResolver;
  GroupListingsDateRecord?: MuiscoGroupListingsDateRecordTypeResolver;
  Datetime?: GraphQLScalarType;
  GroupListingsDateEdge?: MuiscoGroupListingsDateEdgeTypeResolver;
  Mutation?: MuiscoMutationTypeResolver;
  CreateDashboardPayload?: MuiscoCreateDashboardPayloadTypeResolver;
  CreateReviewPayload?: MuiscoCreateReviewPayloadTypeResolver;
  CreateTopographyPayload?: MuiscoCreateTopographyPayloadTypeResolver;
  UpdateDashboardPayload?: MuiscoUpdateDashboardPayloadTypeResolver;
  UpdateReviewPayload?: MuiscoUpdateReviewPayloadTypeResolver;
  UpdateTopographyPayload?: MuiscoUpdateTopographyPayloadTypeResolver;
  DeleteDashboardPayload?: MuiscoDeleteDashboardPayloadTypeResolver;
  DeleteReviewPayload?: MuiscoDeleteReviewPayloadTypeResolver;
  DeleteTopographyPayload?: MuiscoDeleteTopographyPayloadTypeResolver;
}
export interface MuiscoQueryTypeResolver<TParent = any> {
  query?: QueryToQueryResolver<TParent>;
  nodeId?: QueryToNodeIdResolver<TParent>;
  node?: QueryToNodeResolver<TParent>;
  allDashboards?: QueryToAllDashboardsResolver<TParent>;
  allReviews?: QueryToAllReviewsResolver<TParent>;
  allTopographies?: QueryToAllTopographiesResolver<TParent>;
  dashboardById?: QueryToDashboardByIdResolver<TParent>;
  reviewById?: QueryToReviewByIdResolver<TParent>;
  topographyById?: QueryToTopographyByIdResolver<TParent>;
  aggregateListings?: QueryToAggregateListingsResolver<TParent>;
  groupListingsDate?: QueryToGroupListingsDateResolver<TParent>;
  dashboard?: QueryToDashboardResolver<TParent>;
  review?: QueryToReviewResolver<TParent>;
  topography?: QueryToTopographyResolver<TParent>;
}

export interface QueryToQueryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToNodeIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToNodeArgs {
  nodeId: string;
}
export interface QueryToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToNodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToAllDashboardsArgs {
  first?: number;
  last?: number;
  offset?: number;
  before?: MuiscoCursor;
  after?: MuiscoCursor;
  orderBy?: Array<MuiscoDashboardsOrderBy>;
  condition?: MuiscoDashboardCondition;
}
export interface QueryToAllDashboardsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToAllDashboardsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToAllReviewsArgs {
  first?: number;
  last?: number;
  offset?: number;
  before?: MuiscoCursor;
  after?: MuiscoCursor;
  orderBy?: Array<MuiscoReviewsOrderBy>;
  condition?: MuiscoReviewCondition;
}
export interface QueryToAllReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToAllReviewsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToAllTopographiesArgs {
  first?: number;
  last?: number;
  offset?: number;
  before?: MuiscoCursor;
  after?: MuiscoCursor;
  orderBy?: Array<MuiscoTopographiesOrderBy>;
  condition?: MuiscoTopographyCondition;
}
export interface QueryToAllTopographiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToAllTopographiesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToDashboardByIdArgs {
  id: string;
}
export interface QueryToDashboardByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToDashboardByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToReviewByIdArgs {
  id: string;
}
export interface QueryToReviewByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToReviewByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTopographyByIdArgs {
  id: string;
}
export interface QueryToTopographyByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTopographyByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToAggregateListingsArgs {
  roomTypeValue?: string;
  fromDateValue?: MuiscoDate;
  toDateValue?: MuiscoDate;
  cityNameValue?: string;
  first?: number;
  last?: number;
  offset?: number;
  before?: MuiscoCursor;
  after?: MuiscoCursor;
}
export interface QueryToAggregateListingsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToAggregateListingsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGroupListingsDateArgs {
  cityNameValue?: string;
  first?: number;
  last?: number;
  offset?: number;
  before?: MuiscoCursor;
  after?: MuiscoCursor;
}
export interface QueryToGroupListingsDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGroupListingsDateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToDashboardArgs {
  nodeId: string;
}
export interface QueryToDashboardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToDashboardArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToReviewArgs {
  nodeId: string;
}
export interface QueryToReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTopographyArgs {
  nodeId: string;
}
export interface QueryToTopographyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTopographyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoNodeTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Query' | 'Dashboard' | 'Review' | 'Topography';
}
export interface MuiscoDashboardsConnectionTypeResolver<TParent = any> {
  nodes?: DashboardsConnectionToNodesResolver<TParent>;
  edges?: DashboardsConnectionToEdgesResolver<TParent>;
  pageInfo?: DashboardsConnectionToPageInfoResolver<TParent>;
  totalCount?: DashboardsConnectionToTotalCountResolver<TParent>;
}

export interface DashboardsConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DashboardsConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DashboardsConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DashboardsConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoDashboardTypeResolver<TParent = any> {
  nodeId?: DashboardToNodeIdResolver<TParent>;
  id?: DashboardToIdResolver<TParent>;
  definition?: DashboardToDefinitionResolver<TParent>;
}

export interface DashboardToNodeIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DashboardToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DashboardToDefinitionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoDashboardsEdgeTypeResolver<TParent = any> {
  cursor?: DashboardsEdgeToCursorResolver<TParent>;
  node?: DashboardsEdgeToNodeResolver<TParent>;
}

export interface DashboardsEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DashboardsEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoPageInfoTypeResolver<TParent = any> {
  hasNextPage?: PageInfoToHasNextPageResolver<TParent>;
  hasPreviousPage?: PageInfoToHasPreviousPageResolver<TParent>;
  startCursor?: PageInfoToStartCursorResolver<TParent>;
  endCursor?: PageInfoToEndCursorResolver<TParent>;
}

export interface PageInfoToHasNextPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToHasPreviousPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToStartCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToEndCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoReviewsConnectionTypeResolver<TParent = any> {
  nodes?: ReviewsConnectionToNodesResolver<TParent>;
  edges?: ReviewsConnectionToEdgesResolver<TParent>;
  pageInfo?: ReviewsConnectionToPageInfoResolver<TParent>;
  totalCount?: ReviewsConnectionToTotalCountResolver<TParent>;
}

export interface ReviewsConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewsConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewsConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewsConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoReviewTypeResolver<TParent = any> {
  nodeId?: ReviewToNodeIdResolver<TParent>;
  id?: ReviewToIdResolver<TParent>;
  listingId?: ReviewToListingIdResolver<TParent>;
  checksum?: ReviewToChecksumResolver<TParent>;
  date?: ReviewToDateResolver<TParent>;
  city?: ReviewToCityResolver<TParent>;
  neighbourhood?: ReviewToNeighbourhoodResolver<TParent>;
  roomType?: ReviewToRoomTypeResolver<TParent>;
  price?: ReviewToPriceResolver<TParent>;
}

export interface ReviewToNodeIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewToListingIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewToChecksumResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewToNeighbourhoodResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewToRoomTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoReviewsEdgeTypeResolver<TParent = any> {
  cursor?: ReviewsEdgeToCursorResolver<TParent>;
  node?: ReviewsEdgeToNodeResolver<TParent>;
}

export interface ReviewsEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewsEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoTopographiesConnectionTypeResolver<TParent = any> {
  nodes?: TopographiesConnectionToNodesResolver<TParent>;
  edges?: TopographiesConnectionToEdgesResolver<TParent>;
  pageInfo?: TopographiesConnectionToPageInfoResolver<TParent>;
  totalCount?: TopographiesConnectionToTotalCountResolver<TParent>;
}

export interface TopographiesConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopographiesConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopographiesConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopographiesConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoTopographyTypeResolver<TParent = any> {
  nodeId?: TopographyToNodeIdResolver<TParent>;
  id?: TopographyToIdResolver<TParent>;
  payload?: TopographyToPayloadResolver<TParent>;
}

export interface TopographyToNodeIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopographyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopographyToPayloadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoTopographiesEdgeTypeResolver<TParent = any> {
  cursor?: TopographiesEdgeToCursorResolver<TParent>;
  node?: TopographiesEdgeToNodeResolver<TParent>;
}

export interface TopographiesEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopographiesEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoAggregateListingsConnectionTypeResolver<TParent = any> {
  nodes?: AggregateListingsConnectionToNodesResolver<TParent>;
  edges?: AggregateListingsConnectionToEdgesResolver<TParent>;
}

export interface AggregateListingsConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregateListingsConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoAggregateListingsRecordTypeResolver<TParent = any> {
  listingsCount?: AggregateListingsRecordToListingsCountResolver<TParent>;
  avgPrice?: AggregateListingsRecordToAvgPriceResolver<TParent>;
  roomType?: AggregateListingsRecordToRoomTypeResolver<TParent>;
  id?: AggregateListingsRecordToIdResolver<TParent>;
}

export interface AggregateListingsRecordToListingsCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregateListingsRecordToAvgPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregateListingsRecordToRoomTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregateListingsRecordToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoAggregateListingEdgeTypeResolver<TParent = any> {
  cursor?: AggregateListingEdgeToCursorResolver<TParent>;
  node?: AggregateListingEdgeToNodeResolver<TParent>;
}

export interface AggregateListingEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregateListingEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoGroupListingsDateConnectionTypeResolver<TParent = any> {
  nodes?: GroupListingsDateConnectionToNodesResolver<TParent>;
  edges?: GroupListingsDateConnectionToEdgesResolver<TParent>;
}

export interface GroupListingsDateConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupListingsDateConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoGroupListingsDateRecordTypeResolver<TParent = any> {
  count?: GroupListingsDateRecordToCountResolver<TParent>;
  date?: GroupListingsDateRecordToDateResolver<TParent>;
}

export interface GroupListingsDateRecordToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupListingsDateRecordToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoGroupListingsDateEdgeTypeResolver<TParent = any> {
  cursor?: GroupListingsDateEdgeToCursorResolver<TParent>;
  node?: GroupListingsDateEdgeToNodeResolver<TParent>;
}

export interface GroupListingsDateEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupListingsDateEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoMutationTypeResolver<TParent = any> {
  createDashboard?: MutationToCreateDashboardResolver<TParent>;
  createReview?: MutationToCreateReviewResolver<TParent>;
  createTopography?: MutationToCreateTopographyResolver<TParent>;
  updateDashboard?: MutationToUpdateDashboardResolver<TParent>;
  updateDashboardById?: MutationToUpdateDashboardByIdResolver<TParent>;
  updateReview?: MutationToUpdateReviewResolver<TParent>;
  updateReviewById?: MutationToUpdateReviewByIdResolver<TParent>;
  updateTopography?: MutationToUpdateTopographyResolver<TParent>;
  updateTopographyById?: MutationToUpdateTopographyByIdResolver<TParent>;
  deleteDashboard?: MutationToDeleteDashboardResolver<TParent>;
  deleteDashboardById?: MutationToDeleteDashboardByIdResolver<TParent>;
  deleteReview?: MutationToDeleteReviewResolver<TParent>;
  deleteReviewById?: MutationToDeleteReviewByIdResolver<TParent>;
  deleteTopography?: MutationToDeleteTopographyResolver<TParent>;
  deleteTopographyById?: MutationToDeleteTopographyByIdResolver<TParent>;
}

export interface MutationToCreateDashboardArgs {
  input: MuiscoCreateDashboardInput;
}
export interface MutationToCreateDashboardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateDashboardArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateReviewArgs {
  input: MuiscoCreateReviewInput;
}
export interface MutationToCreateReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateTopographyArgs {
  input: MuiscoCreateTopographyInput;
}
export interface MutationToCreateTopographyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateTopographyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateDashboardArgs {
  input: MuiscoUpdateDashboardInput;
}
export interface MutationToUpdateDashboardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateDashboardArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateDashboardByIdArgs {
  input: MuiscoUpdateDashboardByIdInput;
}
export interface MutationToUpdateDashboardByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateDashboardByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateReviewArgs {
  input: MuiscoUpdateReviewInput;
}
export interface MutationToUpdateReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateReviewByIdArgs {
  input: MuiscoUpdateReviewByIdInput;
}
export interface MutationToUpdateReviewByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateReviewByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateTopographyArgs {
  input: MuiscoUpdateTopographyInput;
}
export interface MutationToUpdateTopographyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateTopographyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateTopographyByIdArgs {
  input: MuiscoUpdateTopographyByIdInput;
}
export interface MutationToUpdateTopographyByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateTopographyByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteDashboardArgs {
  input: MuiscoDeleteDashboardInput;
}
export interface MutationToDeleteDashboardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteDashboardArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteDashboardByIdArgs {
  input: MuiscoDeleteDashboardByIdInput;
}
export interface MutationToDeleteDashboardByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteDashboardByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteReviewArgs {
  input: MuiscoDeleteReviewInput;
}
export interface MutationToDeleteReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteReviewByIdArgs {
  input: MuiscoDeleteReviewByIdInput;
}
export interface MutationToDeleteReviewByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteReviewByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteTopographyArgs {
  input: MuiscoDeleteTopographyInput;
}
export interface MutationToDeleteTopographyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteTopographyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteTopographyByIdArgs {
  input: MuiscoDeleteTopographyByIdInput;
}
export interface MutationToDeleteTopographyByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteTopographyByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoCreateDashboardPayloadTypeResolver<TParent = any> {
  clientMutationId?: CreateDashboardPayloadToClientMutationIdResolver<TParent>;
  dashboard?: CreateDashboardPayloadToDashboardResolver<TParent>;
  query?: CreateDashboardPayloadToQueryResolver<TParent>;
  dashboardEdge?: CreateDashboardPayloadToDashboardEdgeResolver<TParent>;
}

export interface CreateDashboardPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateDashboardPayloadToDashboardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateDashboardPayloadToQueryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateDashboardPayloadToDashboardEdgeArgs {
  orderBy?: Array<MuiscoDashboardsOrderBy>;
}
export interface CreateDashboardPayloadToDashboardEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CreateDashboardPayloadToDashboardEdgeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoCreateReviewPayloadTypeResolver<TParent = any> {
  clientMutationId?: CreateReviewPayloadToClientMutationIdResolver<TParent>;
  review?: CreateReviewPayloadToReviewResolver<TParent>;
  query?: CreateReviewPayloadToQueryResolver<TParent>;
  reviewEdge?: CreateReviewPayloadToReviewEdgeResolver<TParent>;
}

export interface CreateReviewPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateReviewPayloadToReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateReviewPayloadToQueryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateReviewPayloadToReviewEdgeArgs {
  orderBy?: Array<MuiscoReviewsOrderBy>;
}
export interface CreateReviewPayloadToReviewEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CreateReviewPayloadToReviewEdgeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoCreateTopographyPayloadTypeResolver<TParent = any> {
  clientMutationId?: CreateTopographyPayloadToClientMutationIdResolver<TParent>;
  topography?: CreateTopographyPayloadToTopographyResolver<TParent>;
  query?: CreateTopographyPayloadToQueryResolver<TParent>;
  topographyEdge?: CreateTopographyPayloadToTopographyEdgeResolver<TParent>;
}

export interface CreateTopographyPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateTopographyPayloadToTopographyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateTopographyPayloadToQueryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateTopographyPayloadToTopographyEdgeArgs {
  orderBy?: Array<MuiscoTopographiesOrderBy>;
}
export interface CreateTopographyPayloadToTopographyEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CreateTopographyPayloadToTopographyEdgeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoUpdateDashboardPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateDashboardPayloadToClientMutationIdResolver<TParent>;
  dashboard?: UpdateDashboardPayloadToDashboardResolver<TParent>;
  query?: UpdateDashboardPayloadToQueryResolver<TParent>;
  dashboardEdge?: UpdateDashboardPayloadToDashboardEdgeResolver<TParent>;
}

export interface UpdateDashboardPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateDashboardPayloadToDashboardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateDashboardPayloadToQueryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateDashboardPayloadToDashboardEdgeArgs {
  orderBy?: Array<MuiscoDashboardsOrderBy>;
}
export interface UpdateDashboardPayloadToDashboardEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UpdateDashboardPayloadToDashboardEdgeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoUpdateReviewPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateReviewPayloadToClientMutationIdResolver<TParent>;
  review?: UpdateReviewPayloadToReviewResolver<TParent>;
  query?: UpdateReviewPayloadToQueryResolver<TParent>;
  reviewEdge?: UpdateReviewPayloadToReviewEdgeResolver<TParent>;
}

export interface UpdateReviewPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateReviewPayloadToReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateReviewPayloadToQueryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateReviewPayloadToReviewEdgeArgs {
  orderBy?: Array<MuiscoReviewsOrderBy>;
}
export interface UpdateReviewPayloadToReviewEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UpdateReviewPayloadToReviewEdgeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoUpdateTopographyPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateTopographyPayloadToClientMutationIdResolver<TParent>;
  topography?: UpdateTopographyPayloadToTopographyResolver<TParent>;
  query?: UpdateTopographyPayloadToQueryResolver<TParent>;
  topographyEdge?: UpdateTopographyPayloadToTopographyEdgeResolver<TParent>;
}

export interface UpdateTopographyPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateTopographyPayloadToTopographyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateTopographyPayloadToQueryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateTopographyPayloadToTopographyEdgeArgs {
  orderBy?: Array<MuiscoTopographiesOrderBy>;
}
export interface UpdateTopographyPayloadToTopographyEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UpdateTopographyPayloadToTopographyEdgeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoDeleteDashboardPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteDashboardPayloadToClientMutationIdResolver<TParent>;
  dashboard?: DeleteDashboardPayloadToDashboardResolver<TParent>;
  deletedDashboardId?: DeleteDashboardPayloadToDeletedDashboardIdResolver<TParent>;
  query?: DeleteDashboardPayloadToQueryResolver<TParent>;
  dashboardEdge?: DeleteDashboardPayloadToDashboardEdgeResolver<TParent>;
}

export interface DeleteDashboardPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteDashboardPayloadToDashboardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteDashboardPayloadToDeletedDashboardIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteDashboardPayloadToQueryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteDashboardPayloadToDashboardEdgeArgs {
  orderBy?: Array<MuiscoDashboardsOrderBy>;
}
export interface DeleteDashboardPayloadToDashboardEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: DeleteDashboardPayloadToDashboardEdgeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoDeleteReviewPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteReviewPayloadToClientMutationIdResolver<TParent>;
  review?: DeleteReviewPayloadToReviewResolver<TParent>;
  deletedReviewId?: DeleteReviewPayloadToDeletedReviewIdResolver<TParent>;
  query?: DeleteReviewPayloadToQueryResolver<TParent>;
  reviewEdge?: DeleteReviewPayloadToReviewEdgeResolver<TParent>;
}

export interface DeleteReviewPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteReviewPayloadToReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteReviewPayloadToDeletedReviewIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteReviewPayloadToQueryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteReviewPayloadToReviewEdgeArgs {
  orderBy?: Array<MuiscoReviewsOrderBy>;
}
export interface DeleteReviewPayloadToReviewEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: DeleteReviewPayloadToReviewEdgeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MuiscoDeleteTopographyPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteTopographyPayloadToClientMutationIdResolver<TParent>;
  topography?: DeleteTopographyPayloadToTopographyResolver<TParent>;
  deletedTopographyId?: DeleteTopographyPayloadToDeletedTopographyIdResolver<TParent>;
  query?: DeleteTopographyPayloadToQueryResolver<TParent>;
  topographyEdge?: DeleteTopographyPayloadToTopographyEdgeResolver<TParent>;
}

export interface DeleteTopographyPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteTopographyPayloadToTopographyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteTopographyPayloadToDeletedTopographyIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteTopographyPayloadToQueryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteTopographyPayloadToTopographyEdgeArgs {
  orderBy?: Array<MuiscoTopographiesOrderBy>;
}
export interface DeleteTopographyPayloadToTopographyEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: DeleteTopographyPayloadToTopographyEdgeArgs, context: any, info: GraphQLResolveInfo): TResult;
}
